commit 375c2c636738299674cd45a2548fd172cb33ee72
Author: Wenxin Wang <i@wenxinwang.me>
Date:   Mon Jan 20 00:03:33 2020 +0800

    l4shenanigan

diff --git a/src/stream/ngx_stream.c b/src/stream/ngx_stream.c
index e51a2e6d..101ed69c 100644
--- a/src/stream/ngx_stream.c
+++ b/src/stream/ngx_stream.c
@@ -583,6 +583,7 @@ ngx_stream_add_addrs(ngx_conf_t *cf, ngx_stream_port_t *stport,
 #endif
         addrs[i].conf.proxy_protocol = addr[i].opt.proxy_protocol;
         addrs[i].conf.addr_text = addr[i].opt.addr_text;
+        addrs[i].conf.l4shenanigan = addr[i].opt.l4shenanigan;
     }
 
     return NGX_OK;
@@ -618,6 +619,7 @@ ngx_stream_add_addrs6(ngx_conf_t *cf, ngx_stream_port_t *stport,
 #endif
         addrs6[i].conf.proxy_protocol = addr[i].opt.proxy_protocol;
         addrs6[i].conf.addr_text = addr[i].opt.addr_text;
+        addrs6[i].conf.l4shenanigan = addr[i].opt.l4shenanigan;
     }
 
     return NGX_OK;
diff --git a/src/stream/ngx_stream.h b/src/stream/ngx_stream.h
index 6b31737d..42b5d178 100644
--- a/src/stream/ngx_stream.h
+++ b/src/stream/ngx_stream.h
@@ -57,6 +57,7 @@ typedef struct {
     unsigned                       reuseport:1;
     unsigned                       so_keepalive:2;
     unsigned                       proxy_protocol:1;
+    unsigned                       l4shenanigan:1;
 #if (NGX_HAVE_TRANSPARENT_PROXY && defined IP_TRANSPARENT)
     unsigned                       tproxy:1;
 #endif
@@ -80,6 +81,7 @@ typedef struct {
     ngx_str_t                      addr_text;
     unsigned                       ssl:1;
     unsigned                       proxy_protocol:1;
+    unsigned                       l4shenanigan:1;
 } ngx_stream_addr_conf_t;
 
 typedef struct {
@@ -234,6 +236,8 @@ struct ngx_stream_session_s {
     unsigned                       health_check:1;
 
     unsigned                       limit_conn_status:2;
+
+    unsigned                       l4shenanigan:1;
 };
 
 
@@ -298,6 +302,7 @@ ngx_int_t ngx_stream_core_content_phase(ngx_stream_session_t *s,
 void ngx_stream_init_connection(ngx_connection_t *c);
 void ngx_stream_session_handler(ngx_event_t *rev);
 void ngx_stream_finalize_session(ngx_stream_session_t *s, ngx_uint_t rc);
+void ngx_stream_rev_bytes(u_char *buf, size_t len);
 
 
 extern ngx_module_t  ngx_stream_module;
diff --git a/src/stream/ngx_stream_core_module.c b/src/stream/ngx_stream_core_module.c
index c09af44e..f6b7339c 100644
--- a/src/stream/ngx_stream_core_module.c
+++ b/src/stream/ngx_stream_core_module.c
@@ -868,6 +868,11 @@ ngx_stream_core_listen(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
             continue;
         }
 
+        if (ngx_strcmp(value[i].data, "l4shenanigan") == 0) {
+            ls->l4shenanigan = 1;
+            continue;
+        }
+
         ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                            "the invalid \"%V\" parameter", &value[i]);
         return NGX_CONF_ERROR;
diff --git a/src/stream/ngx_stream_handler.c b/src/stream/ngx_stream_handler.c
index f05dc8ea..1bf70857 100644
--- a/src/stream/ngx_stream_handler.c
+++ b/src/stream/ngx_stream_handler.c
@@ -176,6 +176,8 @@ ngx_stream_init_connection(ngx_connection_t *c)
     rev = c->read;
     rev->handler = ngx_stream_session_handler;
 
+    s->l4shenanigan = addr_conf->l4shenanigan;
+
     if (addr_conf->proxy_protocol && c->type == SOCK_STREAM) {
         c->log->action = "reading PROXY protocol";
 
@@ -195,6 +197,9 @@ ngx_stream_init_connection(ngx_connection_t *c)
         u_char *p;
 
         c->log->action = "prereading udp PROXY protocol";
+        if (s->l4shenanigan) {
+            ngx_stream_rev_bytes(c->buffer->pos, ngx_buf_size(c->buffer));
+        }
         p = ngx_proxy_protocol_read(c, c->buffer->pos, c->buffer->last);
 
         if (p == NULL || p != c->buffer->last) {
@@ -278,6 +283,9 @@ ngx_stream_proxy_protocol_handler(ngx_event_t *rev)
         ngx_del_timer(rev);
     }
 
+    if (s->l4shenanigan) {
+        ngx_stream_rev_bytes(buf, n);
+    }
     p = ngx_proxy_protocol_read(c, buf, buf + n);
 
     if (p == NULL) {
@@ -401,3 +409,17 @@ ngx_stream_log_error(ngx_log_t *log, u_char *buf, size_t len)
 
     return p;
 }
+
+void
+ngx_stream_rev_bytes(u_char *buf, size_t len) {
+    u_char  *p;
+    for (p = buf; p < buf + len; ++p) {
+        if (*p >= 48 && *p <= 57) {
+            *p = 48 + (57 - *p);
+        } else if (*p >= 65 && *p <= 90) {
+            *p = 65 + (90 - *p);
+        } else if (*p >= 97 && *p <= 122) {
+            *p = 97 + (122 - *p);
+        }
+    }
+}
diff --git a/src/stream/ngx_stream_proxy_module.c b/src/stream/ngx_stream_proxy_module.c
index 1590f30e..e2679870 100644
--- a/src/stream/ngx_stream_proxy_module.c
+++ b/src/stream/ngx_stream_proxy_module.c
@@ -31,6 +31,7 @@ typedef struct {
     ngx_uint_t                       next_upstream_tries;
     ngx_flag_t                       next_upstream;
     ngx_flag_t                       proxy_protocol;
+    ngx_flag_t                       l4shenanigan;
     ngx_stream_upstream_local_t     *local;
     ngx_flag_t                       socket_keepalive;
 
@@ -238,6 +239,13 @@ static ngx_command_t  ngx_stream_proxy_commands[] = {
       offsetof(ngx_stream_proxy_srv_conf_t, proxy_protocol),
       NULL },
 
+    { ngx_string("proxy_l4shenanigan"),
+      NGX_STREAM_MAIN_CONF|NGX_STREAM_SRV_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_STREAM_SRV_CONF_OFFSET,
+      offsetof(ngx_stream_proxy_srv_conf_t, l4shenanigan),
+      NULL },
+
 #if (NGX_STREAM_SSL)
 
     { ngx_string("proxy_ssl"),
@@ -689,6 +706,8 @@ ngx_stream_proxy_connect(ngx_stream_session_t *s)
     u->connected = 0;
     u->proxy_protocol = pscf->proxy_protocol;
 
+    s->l4shenanigan = s->l4shenanigan || pscf->l4shenanigan;
+
     if (u->state) {
         u->state->response_time = ngx_current_msec - u->start_time;
     }
@@ -844,6 +863,10 @@ ngx_stream_proxy_init_upstream(ngx_stream_session_t *s)
                        "stream proxy add preread buffer: %uz",
                        c->buffer->last - c->buffer->pos);
 
+        if (s->l4shenanigan) {
+            ngx_stream_rev_bytes(c->buffer->pos, ngx_buf_size(c->buffer));
+        }
+
         cl = ngx_chain_get_free_buf(c->pool, &u->free);
         if (cl == NULL) {
             ngx_stream_proxy_finalize(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
@@ -882,6 +905,9 @@ ngx_stream_proxy_init_upstream(ngx_stream_session_t *s)
             ngx_stream_proxy_finalize(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
             return;
         }
+        if (s->l4shenanigan) {
+            ngx_stream_rev_bytes(cl->buf->pos, p - cl->buf->pos);
+        }
 
         cl->buf->last = p;
         cl->buf->temporary = 1;
@@ -1633,7 +1659,7 @@ ngx_stream_proxy_process(ngx_stream_session_t *s, ngx_uint_t from_upstream,
             }
 
             if (n >= 0) {
-                if (!*received && from_upstream) {
+                if (!*received && c->type == SOCK_DGRAM && from_upstream) {
                     u_char pp_ack[] = "PPAP" CRLF; // ignore first one
                     if (c->read->timer_set) {
                         ngx_del_timer(c->read);
@@ -1645,6 +1671,10 @@ ngx_stream_proxy_process(ngx_stream_session_t *s, ngx_uint_t from_upstream,
                     }
                 }
 
+                if (s->l4shenanigan) {
+                    ngx_stream_rev_bytes(b->last, n);
+                }
+
                 if (limit_rate) {
                     delay = (ngx_msec_t) (n * 1000 / limit_rate);
 
@@ -2004,6 +2034,7 @@ ngx_stream_proxy_create_srv_conf(ngx_conf_t *cf)
     conf->next_upstream_tries = NGX_CONF_UNSET_UINT;
     conf->next_upstream = NGX_CONF_UNSET;
     conf->proxy_protocol = NGX_CONF_UNSET;
+    conf->l4shenanigan = NGX_CONF_UNSET;
     conf->local = NGX_CONF_UNSET_PTR;
     conf->socket_keepalive = NGX_CONF_UNSET;
 
@@ -2059,6 +2090,8 @@ ngx_stream_proxy_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
 
     ngx_conf_merge_value(conf->proxy_protocol, prev->proxy_protocol, 0);
 
+    ngx_conf_merge_value(conf->l4shenanigan, prev->l4shenanigan, 0);
+
     ngx_conf_merge_ptr_value(conf->local, prev->local, NULL);
 
     ngx_conf_merge_value(conf->socket_keepalive,
